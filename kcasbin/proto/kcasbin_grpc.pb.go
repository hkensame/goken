// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AuthorizationClient is the client API for Authorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationClient interface {
	AddPolicies(ctx context.Context, in *MatchPolicies, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemovePolicies(ctx context.Context, in *MatchPolicies, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdatePolicies(ctx context.Context, in *UpdatePoliciesReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FindPoliciesItems(ctx context.Context, in *FindPoliciesFilterReq, opts ...grpc.CallOption) (*MatchPolicies, error)
	AddGroupingPolicies(ctx context.Context, in *GroupingPolicies, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveGroupingPolicies(ctx context.Context, in *GroupingPolicies, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateGroupingPolicies(ctx context.Context, in *UpdateGroupingPoliciesReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FindGroupingPoliciesItems(ctx context.Context, in *FindGroupingPoliciesFilterReq, opts ...grpc.CallOption) (*GroupingPolicies, error)
	Authorize(ctx context.Context, in *AuthorizeReq, opts ...grpc.CallOption) (*AuthorizeRes, error)
	GetUserRoles(ctx context.Context, in *GetUserRolesReq, opts ...grpc.CallOption) (*GetUserRolesRes, error)
	GetRoleUsers(ctx context.Context, in *GetRoleUsersReq, opts ...grpc.CallOption) (*GetRoleUsersRes, error)
}

type authorizationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationClient(cc grpc.ClientConnInterface) AuthorizationClient {
	return &authorizationClient{cc}
}

func (c *authorizationClient) AddPolicies(ctx context.Context, in *MatchPolicies, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/kcasbin.Authorization/AddPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) RemovePolicies(ctx context.Context, in *MatchPolicies, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/kcasbin.Authorization/RemovePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) UpdatePolicies(ctx context.Context, in *UpdatePoliciesReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/kcasbin.Authorization/UpdatePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) FindPoliciesItems(ctx context.Context, in *FindPoliciesFilterReq, opts ...grpc.CallOption) (*MatchPolicies, error) {
	out := new(MatchPolicies)
	err := c.cc.Invoke(ctx, "/kcasbin.Authorization/FindPoliciesItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) AddGroupingPolicies(ctx context.Context, in *GroupingPolicies, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/kcasbin.Authorization/AddGroupingPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) RemoveGroupingPolicies(ctx context.Context, in *GroupingPolicies, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/kcasbin.Authorization/RemoveGroupingPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) UpdateGroupingPolicies(ctx context.Context, in *UpdateGroupingPoliciesReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/kcasbin.Authorization/UpdateGroupingPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) FindGroupingPoliciesItems(ctx context.Context, in *FindGroupingPoliciesFilterReq, opts ...grpc.CallOption) (*GroupingPolicies, error) {
	out := new(GroupingPolicies)
	err := c.cc.Invoke(ctx, "/kcasbin.Authorization/FindGroupingPoliciesItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) Authorize(ctx context.Context, in *AuthorizeReq, opts ...grpc.CallOption) (*AuthorizeRes, error) {
	out := new(AuthorizeRes)
	err := c.cc.Invoke(ctx, "/kcasbin.Authorization/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetUserRoles(ctx context.Context, in *GetUserRolesReq, opts ...grpc.CallOption) (*GetUserRolesRes, error) {
	out := new(GetUserRolesRes)
	err := c.cc.Invoke(ctx, "/kcasbin.Authorization/GetUserRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetRoleUsers(ctx context.Context, in *GetRoleUsersReq, opts ...grpc.CallOption) (*GetRoleUsersRes, error) {
	out := new(GetRoleUsersRes)
	err := c.cc.Invoke(ctx, "/kcasbin.Authorization/GetRoleUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServer is the server API for Authorization service.
// All implementations must embed UnimplementedAuthorizationServer
// for forward compatibility
type AuthorizationServer interface {
	AddPolicies(context.Context, *MatchPolicies) (*emptypb.Empty, error)
	RemovePolicies(context.Context, *MatchPolicies) (*emptypb.Empty, error)
	UpdatePolicies(context.Context, *UpdatePoliciesReq) (*emptypb.Empty, error)
	FindPoliciesItems(context.Context, *FindPoliciesFilterReq) (*MatchPolicies, error)
	AddGroupingPolicies(context.Context, *GroupingPolicies) (*emptypb.Empty, error)
	RemoveGroupingPolicies(context.Context, *GroupingPolicies) (*emptypb.Empty, error)
	UpdateGroupingPolicies(context.Context, *UpdateGroupingPoliciesReq) (*emptypb.Empty, error)
	FindGroupingPoliciesItems(context.Context, *FindGroupingPoliciesFilterReq) (*GroupingPolicies, error)
	Authorize(context.Context, *AuthorizeReq) (*AuthorizeRes, error)
	GetUserRoles(context.Context, *GetUserRolesReq) (*GetUserRolesRes, error)
	GetRoleUsers(context.Context, *GetRoleUsersReq) (*GetRoleUsersRes, error)
	mustEmbedUnimplementedAuthorizationServer()
}

// UnimplementedAuthorizationServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServer struct {
}

func (UnimplementedAuthorizationServer) AddPolicies(context.Context, *MatchPolicies) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolicies not implemented")
}
func (UnimplementedAuthorizationServer) RemovePolicies(context.Context, *MatchPolicies) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicies not implemented")
}
func (UnimplementedAuthorizationServer) UpdatePolicies(context.Context, *UpdatePoliciesReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicies not implemented")
}
func (UnimplementedAuthorizationServer) FindPoliciesItems(context.Context, *FindPoliciesFilterReq) (*MatchPolicies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPoliciesItems not implemented")
}
func (UnimplementedAuthorizationServer) AddGroupingPolicies(context.Context, *GroupingPolicies) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroupingPolicies not implemented")
}
func (UnimplementedAuthorizationServer) RemoveGroupingPolicies(context.Context, *GroupingPolicies) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupingPolicies not implemented")
}
func (UnimplementedAuthorizationServer) UpdateGroupingPolicies(context.Context, *UpdateGroupingPoliciesReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroupingPolicies not implemented")
}
func (UnimplementedAuthorizationServer) FindGroupingPoliciesItems(context.Context, *FindGroupingPoliciesFilterReq) (*GroupingPolicies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGroupingPoliciesItems not implemented")
}
func (UnimplementedAuthorizationServer) Authorize(context.Context, *AuthorizeReq) (*AuthorizeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedAuthorizationServer) GetUserRoles(context.Context, *GetUserRolesReq) (*GetUserRolesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoles not implemented")
}
func (UnimplementedAuthorizationServer) GetRoleUsers(context.Context, *GetRoleUsersReq) (*GetRoleUsersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleUsers not implemented")
}
func (UnimplementedAuthorizationServer) mustEmbedUnimplementedAuthorizationServer() {}

// UnsafeAuthorizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationServer will
// result in compilation errors.
type UnsafeAuthorizationServer interface {
	mustEmbedUnimplementedAuthorizationServer()
}

func RegisterAuthorizationServer(s *grpc.Server, srv AuthorizationServer) {
	s.RegisterService(&_Authorization_serviceDesc, srv)
}

func _Authorization_AddPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchPolicies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).AddPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kcasbin.Authorization/AddPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).AddPolicies(ctx, req.(*MatchPolicies))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_RemovePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchPolicies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).RemovePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kcasbin.Authorization/RemovePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).RemovePolicies(ctx, req.(*MatchPolicies))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_UpdatePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePoliciesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).UpdatePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kcasbin.Authorization/UpdatePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).UpdatePolicies(ctx, req.(*UpdatePoliciesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_FindPoliciesItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPoliciesFilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).FindPoliciesItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kcasbin.Authorization/FindPoliciesItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).FindPoliciesItems(ctx, req.(*FindPoliciesFilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_AddGroupingPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupingPolicies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).AddGroupingPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kcasbin.Authorization/AddGroupingPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).AddGroupingPolicies(ctx, req.(*GroupingPolicies))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_RemoveGroupingPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupingPolicies)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).RemoveGroupingPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kcasbin.Authorization/RemoveGroupingPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).RemoveGroupingPolicies(ctx, req.(*GroupingPolicies))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_UpdateGroupingPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupingPoliciesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).UpdateGroupingPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kcasbin.Authorization/UpdateGroupingPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).UpdateGroupingPolicies(ctx, req.(*UpdateGroupingPoliciesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_FindGroupingPoliciesItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindGroupingPoliciesFilterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).FindGroupingPoliciesItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kcasbin.Authorization/FindGroupingPoliciesItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).FindGroupingPoliciesItems(ctx, req.(*FindGroupingPoliciesFilterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kcasbin.Authorization/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).Authorize(ctx, req.(*AuthorizeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRolesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kcasbin.Authorization/GetUserRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetUserRoles(ctx, req.(*GetUserRolesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetRoleUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetRoleUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kcasbin.Authorization/GetRoleUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetRoleUsers(ctx, req.(*GetRoleUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authorization_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kcasbin.Authorization",
	HandlerType: (*AuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPolicies",
			Handler:    _Authorization_AddPolicies_Handler,
		},
		{
			MethodName: "RemovePolicies",
			Handler:    _Authorization_RemovePolicies_Handler,
		},
		{
			MethodName: "UpdatePolicies",
			Handler:    _Authorization_UpdatePolicies_Handler,
		},
		{
			MethodName: "FindPoliciesItems",
			Handler:    _Authorization_FindPoliciesItems_Handler,
		},
		{
			MethodName: "AddGroupingPolicies",
			Handler:    _Authorization_AddGroupingPolicies_Handler,
		},
		{
			MethodName: "RemoveGroupingPolicies",
			Handler:    _Authorization_RemoveGroupingPolicies_Handler,
		},
		{
			MethodName: "UpdateGroupingPolicies",
			Handler:    _Authorization_UpdateGroupingPolicies_Handler,
		},
		{
			MethodName: "FindGroupingPoliciesItems",
			Handler:    _Authorization_FindGroupingPoliciesItems_Handler,
		},
		{
			MethodName: "Authorize",
			Handler:    _Authorization_Authorize_Handler,
		},
		{
			MethodName: "GetUserRoles",
			Handler:    _Authorization_GetUserRoles_Handler,
		},
		{
			MethodName: "GetRoleUsers",
			Handler:    _Authorization_GetRoleUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kcasbin.proto",
}
